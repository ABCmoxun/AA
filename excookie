

exception(例外，异常)和BaseException(所有异常的基类)

sys.exit([arg]) 	退出程序，正常退出时sys.exit(0)
os._exit()
sys.path 	模块搜索路径 path[0] 是当前脚本程序的路径名，否则为 '';
sys.path : 是一个列表，可以添加路径。该列表中的路径，对python下的所有环境可见
__import__() : 参数为一个目录， 等同于import 导入  
ex:  m = __import__(路径文件夹)   #路径文件是string

sys.argv : 自动收集命令行内容为一个列表
(运行程序，python3 xxx 后面的参数)


linux命令：pwd  #查看当前路径

os.path  ##
os.path.exists(路径文件夹)
功能 ： 判断一个文件是否存在
参数 ： 一个路径文件
ex:os.path.exists('/home/tarena/AA')   #好像必须是绝对路径

os.unlink('xx')   or   os.remove('xx')  #绝对路径
功能:删除某个文件
参数 ： 一个路径文件

os.listdir(path)
获取该文件夹下所有文件，形成一个列表
ex:os.listdir('/home/tarena/AA')    #列表(#好像必须是绝对路径)

os.path.isfile(path)
os.path.isdir(path)
判断一个文件是否是普通文件/文件夹 
  ex:os.path.isfile(“xxx”)    #填绝对路径


cookie和session的设置
<form action='' method=''>
{% csrf_token %}
设置cookie
响应对象.set_cookie(key,value,expires)
			key:cookie的名字
			value:cookie的值
			expires:cookie的保存时间，以s为单位
  ex:resp.set_cookie(key,value,expires)

session：
设置session
  request.session['key'] = 值;
  获取session的值
	request.session[key] 或 request.session.get(key)
	ex:id=request.session['id']
  删除 session 的值
	del request.session['key']				ex:request.session.get('')
	ex:del request.session['id']


1、设置session的过期时间(可以不设置时间)
	request.session.set_expiry(time)
	time 就是以秒为单位的一个时间

 2、在 settings.py中，有关session的设置
	1、SESSION_COOKIE_AGE
		作用：设置sessionID在cookies中的存活时间(单位：s)
		ex:
			SESSION_COOKIE_AGE=60*10		#sessionID在cookie中保留10分钟

	2、SESSION_EXPIRE_AT_BROWSER_CLOSE
		作用：设置在浏览器关闭时同时清除服务器上对应的session空间
		ex:
			SESSION_EXPIRE_AT_BROWSER_CLOSE=True




夏令时时间与UTC时间差(秒为单位)
time.altzone
本地区时间与UTC时间差(秒为单位)
time.timezone
ex: time.altzone=time.timezone

CST为中国标准时间
time.sleep(secs) 	让程序按给定秒数的浮点数睡眠一段时间

time.time() 	返回从计算机元年至当前时间的秒数的浮点数(UTC时间为准)
time.mktime(tuple) 	将本地日期时间元组转换为新纪元秒数时间(UTC为准)
t = time.mktime((y, m, d, 0, 0, 0, 0, 0, 0))


time.asctime([tuple]) 	将时间元组转换为日期时间字符串
ex:t.asctime()			#'Thu Aug 30 00:08:48 2018'

time.gmtime([secs]) 	将给秒数转换为用UTC表达的时间元组
ex:   type(t.gmtime())		#<class 'time.struct_time'>
t.gmtime()
#time.struct_time(tm_year=2018, tm_mon=8, tm_mday=29, tm_hour=16, tm_min=53, tm_sec=9, tm_wday=2, tm_yday=241, tm_isdst=0)

也可截取片段t[0]

time.localtime([secs]) 	将UTC秒数时间转换为日期元组（以本地时间为准)
ex:t.localtime() 
#time.struct_time(tm_year=2018, tm_mon=8, tm_mday=30, tm_hour=0, tm_min=10, tm_sec=31, tm_wday=3, tm_yday=242, tm_isdst=0)
可以截取片段:
ex: t[3:6];  t[3], t[4], t[5]

type(t.localtime())
#<class 'time.struct_time'>


等于变量后,可以切片,索引




随机数

R.random() 	返回一个[0, 1) 之间的随机实数
R.uniform(a,b) 	返回[a,b) 区间内的随机实数
random.randint(a,b)			用于生成一个指定范围内的整数
R.randrange([start,] stop[, step]) 	返回range(start,stop,step)中的随机整数

#seq:  字符串，列表，元组
R.choice(sql) 	从序列中返回随意一个元素
R.sample(seq,n) 	从序列中选择n个随机且不重复的元素 返回list

#seq：列表
洗牌:list1=R.shuffle(seq [, random]) 	随机指定序列的顺序(乱序序列）

p = ['A' , 'B', 'C', 'D', 'E' ]
random.shuffle(p)  
print (p)  









