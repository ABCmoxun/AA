


*********************************************************
第三天

查找  find（query，field） 
      findOne（）

操作符 :  比较  $lt  $lte  $gt  $gte  $eq  $ne  $in  $nin
          逻辑  $and  $or  $not  $nor
	  数组  $all  $size  
	  其他  $exists   $type  $mod 
查找函数:  limit()  skip()  sort()  count()   pretty()

其他函数  distinct()  getCollection()


删除   remove(query,justOne)


=======================================

修改数据
update tableName set ... where .....

db.collectionName.update(query,update,upsert,multi)
功能:  修改一个文档
参数:  query:  删选要修改的文档 相当于where子句  
                 用法同查找
	  update:  将数据更新为什么内容  相当于set操作 
	          需要使用修改器操作符
	  upsert:  bool值 默认为false  表示如果query的文档不存在则无法修改
	          如果设置为true  表示如果query的文档不存在则根据query和update参数插入新的文档
	  multi:   bool值 默认为false 如果有多条符合筛选条件的文档则只修改第一条
	          如果设置为true 则修改所有符合条件的文档

ex:  将阿红年龄改为24  
db.class0.update({name:'阿红'},{$set:{age:24}})

ex:  如果筛选数据不存在则插入一个新的文档
db.class0.update({name:'阿花'},{$set:{age:18,sex:'w'}},true)

ex:   可以同时修改多条匹配到的文档
db.class0.update({sex:'w'},{$set:{age:20}},false,true)


修改器操作符

$set 
修改一个域的值
增加一个域
ex:   db.class0.update({name:'阿红'},{$set:{sex:'w'}})

$unset 
删除一个域
ex:  删除文档的sex和age域 （后面数字习惯写1，0 都表示删除）
db.class0.update({name:'八戒'},{$unset:{sex:0,age:0}})

$rename
修改一个域的名称
ex:   修改所有的sex域为gender
db.class0.update({},{$rename:{sex:'gender'}},false,true)


$setOnInsert
如果update操作插入新的文档，则补充插入内容

ex:  如果插入数据则同时插入sex和tel域内容
db.class0.update({name:'阿华'},{$set:{age:21},$setOnInsert:{sex:'m',tel:'123456'}},true)

$inc
加减修改器
eg  年龄减2
db.class0.update({age:{$lt:18}},{$inc:{age:-2}},false,true)
* $inc  可加正数 负数 小数都可以

$mul  
乘法修改器
ex:  
db.class0.update({name:'阿华'},{$mul:{age:-0.5}})
* $mul  可乘以正数 负数 小数都可以

$min  
设定最小值:  如果筛选的文档指定的域值小于min值则不修改，如果大于min值则改为min值

ex:  
db.class0.update({},{$min:{age:19}},false,true)

$max 
设置最大值:  如果筛选的文档指定至于大于max值则不变，如果小于max值则修改为max值

ex:  db.class0.update({},{$max:{age:20}},false,true)


数组修改器
添加一个域
$push  向数组中添加一项
ex: db.class1.update({name:"Abby"},{$push:{score:30}})

$pushAll  向数组中添加多项

ex:
db.class1.update({name:"Jame"},{$pushAll:{score:[10,20]}})

$each  逐个操作
ex:  利用each添加多项
db.class1.update({name:"Lily"},{$push:{score:{$each:[10,5]}}})

$position
选择数据位置进行操作   必须和each合用
ex:

db.class1.update({name:"Lucy"},{$push:{score:{$each:[10,10],$position:1}}})

$sort
对数组进行排序  必须和each合用

ex: 
db.class1.update({name:"Lily"},{$push:{score:{$each:[],$sort:1}}})

$pull  从数组中删除一个元素

eg:  db.class1.update({name:'Lucy'},{$pull:{score:10}})


$pullAll  从数组中删除多个元素
ex:  db.class1.update({name:'Jame'},{$pullAll:{score:[10,20]}})

$pop  弹出数组中的一项
ex:   db.class1.update({name:'Lily'},{$pop:{score:-1}})
* -1表示弹出数组中的第一项  1 表示弹出最后一项


$addToSet 向数组中插入一个元素，但是该元素不能和其他元素重复
ex:   如果已经存在66则无法插入，如果不存在则插入66
db.class1.update({name:'Lily'},{$addToSet:{score:66}})



数据类型补充
时间类型   
mongo中存储时间的格式: ISODate

方法1   自动生成当前时间
db.class2.insert({title:'Python入门',date:new Date()})

方法2   生成当前时间
db.class2.insert({title:'Python精通',date:ISODate()})

方法3   将生成时间变为字符串存储
db.class2.insert({title:'Python AI',date:Date()})

指定时间的转换
ISOData() 
功能:  生成mongo时间类型
参数:  如果不加参数则生成当前时间
        参数格式   "2018-11-11 11:11:11"
	           "20180101 11:11:11"
		   "20181102"

ex: 
db.class2.insert({title:'Python 爬虫',date:ISODate("20180101 11:11:11")})

时间戳获取
ex:  db.class2.insert({title:'PythonWeb',date:ISODate().valueOf()})


null
1. 如果某个域存在却没有值可以设置为null
ex:  db.class2.insert({title:'Python 秘籍',price:null})
2.表示某个域不存在可以通过null进行匹配
ex:   db.class2.find({date:null},{_id:0})
可以查找到date不存在的文档


Object类型 （值是一个文档）
*当使用外层文档引用内部文档的时候可以用用 . 的方法引用
 在使用时需要加上引号
ex:  
db.class2.find({'publication.publisher':'人民教育'},{_id:0})

ex:  db.class2.update({title:'Python数据'},{$set:{'publication.price':58.8}})


数组的下标引用
使用一个数组时，可以使用 .序列下标 的方式使用数组具体的某一项。同样需要用引号
ex:   db.class1.update({name:'Lily'},{$set:{'score.0':60}})
ex:   db.class1.find({'score.0':{$gt:90}})


文档查找结果的有序性
可以通过[]取查找结果序列的某一项
db.class1.find({},{_id:0})[1]

练习 ： 
使用之前的grade数据库
1. 将小红的年龄变为8岁 兴趣爱好变为 跳舞 画画
{$set:{age:8,hobby:['dance','draw']}}
2. 追加小明兴趣爱好  唱歌
{$push:{hobby:'sing'}}
3. 小王兴趣爱好增加  吹牛 打篮球
{$pushAll:{hobby:['吹牛','basketball']}}
4. 小李增加爱好，跑步和唱歌，但是不要和以前的重复
{$addToSet:{hobby:{$each:['running','sing']}}}
5. 该班所有同学年龄加1
update({},{$inc:{age:1}},false,true)
6. 删除小明的sex属性
{$unset:{sex:0}}
7. 删除小李兴趣中的第一项
{$pop:{hobby:-1}}
8. 将小红兴趣中的画画爱好删除
{$pull:{hobby:'draw'}}


索引

指的是建立指定键值及所在文档中存储位置的对照清单。使用索引可以方便我们进行快速查找，减少遍历次数，提高查找效率

mongo中如何创建索引

ensureIndex()
功能:  创建索引
参数:  索引类别，索引选项

ex: 
db.class0.ensureIndex({'name':1})

* 1表示为该域创建正向索引，-1 表示逆向索引
* _id 域会自动创建索引

查看一个集合中的索引
db.class0.getIndexes()

删除索引
dropIndex()
功能:  删除索引
参数:  删除索引的名称

e.g. 可以通过索引名称或者索引键值对删除
db.class0.dropIndex('name_1')
db.class0.dropIndex({name:1})

dropIndexes()
功能:  删除所有索引
ex:   db.class0.dropIndexes()

索引类型 
复合索引 

根据多个域创建一个索引
db.class0.ensureIndex({name:1,age:-1})

数组索引
如果对某个数组域创建索引，那么表示对数组中的每个值均创建了索引，通过数组中单个值查询，也是索引查询
db.class1.ensureIndex({'score':1})

子文档索引 
如果对一个域创建索引，值是一个文档则子文档也会同时形成索引

如果对子文档某一个域进行索引创建，则只有通过子文档中的该域查找时为索引查找

eg:  
db.class2.ensureIndex({'publication.pulisher':1})


覆盖索引
查找时只获取索引项的内容，而不必去获取原数据中的其他内容，这样就不去连接原来的数据直接返回即可

ex:    name为索引项，显示也只要name域
db.class0.find({name:'Lily'},{_id:0,name:1})

唯一索引 

创建索引时希望索引域的值均不相同，也可以据此限制一个域的值

ex:   db.class0.ensureIndex({name:1},{'unique':true})

*当对某个域创建了唯一索引后，即不允许在插入相同的值的文档

稀疏索引（间隙索引）
只针对有指定域的文档创建索引表，没有该域的文档，不会插入到索引表中

ex:  db.class2.ensureIndex({'date':1},{sparse:true})

索引约束:  
1.影响数据的插入，删除，修改操作。当数据发生改变时，索引表必须同步更新
2.索引也是需要占用一定的空间资源

综上:  当数据库大量的操作是插入，修改，删除操作，而非查询操作时，不适合创建索引。数据量比较小时，考虑到空间成本也不适合创建索引。即使适合创建索引的情况，也不是索引越多越好。



聚合
多数据文档进行整理统计 
db.collectionName.aggregate()
功能 ： 聚合函数，配合聚合条件进行数据整理统计
参数 ： 聚合条件  

聚合操作符

$group  分组  和分组操作符配合使用确定按什么分组
++++++++++++++++++++++++++++++++++
分组操作符 （和$group配合）

$sum 求和
统计每组个数
db.class0.aggregate({$group:{_id:'$gender',num:{$sum:1}}})
          聚合       分组    按gender分组  统计结果名

统计每组年龄和
db.class0.aggregate({$group:{_id:'$gender',num:{$sum:'$age'}}})


$avg  求平均数
求平均年龄
db.class0.aggregate({$group:{_id:'$gender',num:{$avg:'$age'}}})


$min  求最小值
求每组姓名的最小值
db.class0.aggregate({$group:{_id:'$gender',name:{$min:'$name'}}})


$max
求每组姓名的最大值
db.class0.aggregate({$group:{_id:'$gender',name:{$max:'$name'}}})

$first 
返回每组第一个文档指定域值
db.class0.aggregate({$group:{_id:'$gender',name:{$first:'$name'}}})

$last
返回每组最后一个文档指定域值
db.class0.aggregate({$group:{_id:'$gender',name:{$last:'$name'}}})
+++++++++++++++++++++++++++++++++++



$project 
用于修饰文档的显示结构
ex:  db.class0.aggregate({$project:{_id:0,name:1,age:1}})
ex: db.class0.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}})

$match  过滤数据
操作符的值同find的query
db.class0.aggregate({$match:{name:{$gt:'Tom'}}})

$skip 跳过前几条文档
db.class0.aggregate({$skip:2})

$limit  显示几条文档
db.class0.aggregate({$limit:2})

$sort  排序
 db.class0.aggregate({$sort:{name:1}})


聚合管道
将前一个聚合操作的结果给下一个聚合操作继续执行
db.collectionName.aggregate([聚合1,聚合2,.....])


ex:   match---> project ---> sort
 db.class0.aggregate([{$match:{name:{$gt:'Tom'}}},{$project:{_id:0,name:1,age:1}},{$sort:{name:-1}}])

ex:   group ---> match
db.class0.aggregate([{$group:{_id:'$gender',num:{$sum:1}}},{$match:{$nor:[{_id:'m'},{_id:'w'}]}}])


作业练习 :
使用之前的grade数据库
增加分数域 score:{'chinese':88,'english':78,'math':98}
1. 按照性别分组统计每组人数
aggregate({$group:{_id:'$sex',num:{$sum:1}}})

2. 按照姓名分组，过滤出有重名的同学
aggregate([{$group:{_id:'$name',num:{$sum:1}}},{$match:{num:{$gt:1}}}])

3. 统计每名男生的语文成绩
aggregate([{$match:{sex:'m'}},{$project:{_id:0,name:1,'score.chinese':1}}])

4. 将女生按照英语分数降序排列
aggregate([{$match:{sex:'w'}},{$sort:{'score.english':-1}}])



******************************************************
第四天

修改
update(query,update,upsert,multi)
修改器: $set  $unset  $rename  $setOnInsert  $inc  $mul
          $min  $max 
	  $push  $pushAll $each  $pull  $pullAll  $position
	  $pop  $addToSet $sort 

数据类型  Date()   ISODate()  valueOf()
          null 的使用
Object: 通过 . 取内部文档
         通过 . 取数组索引

索引创建  ensureIndex()
聚合操作  aggregate()
聚合操作符  $group  $match  $project  $limit  $skip  $sort
========================================================


固定集合
mongo中可以创建大小固定的集合，称之为固定集合，固定集合的性能出色，适用于很多场景
比如:  日志处理，  临时缓存

特点:  插入速度快
      顺序查询速度快
	  能够淘汰早期数据
	  可以控制集合空间

创建：
db.createCollection(collectionName,{capped:true,size:10000,max:1000})

size: 设置固定集合的大小  kb
max:  最多能容纳多少文档

eg:  创建一个最多包含三条文档的集合
db.createCollection('log',{capped:true,size:10,max:3})


文件存储
数据库存储文件的方式 
1. 在数据库中以字符串的方式存储文件在本地的路径
优点:  节省数据库空间 
缺点:  当数据库或者文件位置发生变化即需要相应修改数据库内容

2. 将文件已二进制数据的方式存放在数据库里
优点: 文件存入数据库，数据库在，文件即不会丢失
缺点:  当文件较大时，数据库空间占用大，提取困难


mongo中  使用GridFS方法 大文件存储
GridFS:  是mongodb中大文件存储的一种方案，mongo中认为大16M的文件为大文件

方案解释:
在mongodb数据库中 创建两个集合 共同完成对文件的存储
fs.files:  存储文件的相关信息，比如：文件名   文件类型
fs.chunks:  实际存储文件内容，以二进制方式分块存储。将大文件分为多个小块，每块占一个空间


mongofiles -d  dbname   put   file
               数据库         要存储的文件
*如果数据库不存在则自动创建

fs.files
{ "_id" : ObjectId("5b0770c169d72e1e3a6eebda"), "chunkSize" : 261120, "uploadDate" : ISODate("2018-05-25T02:11:13.986Z"), "length" : 8313457, "md5" : "4b39deb86dcb6ece44ef52a69dcd6e1a", "filename" : "xly.zip" }

fs.chunks
{ "_id" : ObjectId("5b0770c169d72e1e3a6eebee"), "files_id" : ObjectId("5b0770c169d72e1e3a6eebda"), "n" : 19, "data" : BinData(0,"wGTrj3......)}


获取数据库中文件
mongofiles -d grid get xly.z
优缺点: 
优点:  存储方便，方便数据库移植，对文件个数没有太多限制
缺点:  读写效率低

from pymongo import MongoClient 
import gridfs 

conn = MongoClient('localhost',27017)
db = conn.grid 
fs = gridfs.GridFS(db)
files = fs.find()
# print(files)
# print(files.count())
for file in files:




游标
为什么使用游标
1. 防止网络拥塞，造成数据传输慢
2. 提高用户解析体验，可以后端解析

var cursor = db.class0.find()  创建游标
cursor.hasNext()  查看是否有下一个数据
cursor.next()  获取下一个数据

通过Python 操作mongodb数据库

Python ---> mongodb编程接口  pymongo

安装
sudo  pip3  install  pymongo

操作步骤
1. 创建mongo数据库的链接对象
from pymongo import MongoClient
conn = MongoClient('localhost',27017)
2. 生成数据库对象
db = conn.stu
3. 生成集合对象
my_set = db.class0
4. 增删改差索引聚合操作


插入数据 
insert()   insert_many()    insert_one()	save()

删除数据   
remove({},multi = True)
	multi  默认为True 表示删除所有符合条件的数据
           设置为False 表示只删除一条

数据查找
find() 
功能:  查找数据库内容
参数:  同 mongo  shell   find()
返回值:  返回一个游标 ---> 迭代器

find()
find_one()
返回值是一个字典

cursor  可迭代对象属性函数
next() 
count()
limit()
skip()

sort()
mongoshell --->  sort({'name':1})

pymongo  --->  sort([('name',1)])
* 进行排序时游标要确保没有被访问过



修改操作  
update() 
参数和mongoshell 中 update相同
update_many(): 匹配到多个文档时全部修改
update_one():  只修改匹配到的第一条文档
* 变成中mongo的数据类型null 可以用Python中的 None替代




索引
创建索引
ensure_index()
create_index()
create_indexes() 创建多个索引

查看集合中的索引
list_indexes()

删除索引
drop_index()   删除某一个索引
drop_indexes()  删除所有索引


聚合操作
aggregate([])
参数:  与mongoshell中聚合参数写法一致
返回值:  迭代器 同find的返回值

 my_set.update({'name':'冰冰'},\
#     {'$set':{'King':'武则天'}},upsert = True)



--------------------------
pymongo中
删除默认删除多条,修改默认修改一条
#修改多条文档
# my_set.update({},{},upsert = True)
# my_set.update_many({},{},multi = True)
# my_set.update_one({},{}})

删除
# my_set.remove({},multi = True)

插入
#一个用字典,多个用列表
obj.insert()
obj.insert_one()
obj.insert_many([])
obj.save()

查找
cursor=obj.find()
cursor=obj.find_one()
#data只有一个结果时,返回值是一个字典
多个结果时,返回一个游标 ---> 迭代器









