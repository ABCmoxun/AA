
安装软件:  pip3  install  Package
升级:	pip3 install --upgrade  Package
卸载:	pip3 uninstall  Package


协程  
定义:  纤程 微线程，协程本质实际只有一个线程在运行
功能原理:  通过应用层记录程序的上下文栈区，实现程序运行中的跳跃。进而实现选择代码段执行

优点 ： 
无需多线程切换的开销
资源消耗非常少
无需进行同步互斥操作
对IO并发性极好

缺点：
无法利用计算机多核资源
如果程序阻塞会阻塞整个进程运行


协程函数	
函数1
sudo pip3 install greenlet
import gevent 
from gevent import monkey
＃多用此函数
#将事件加入协程 
obj = gevent.spawn(fun1,1)

gevent.join()
功能 ： 回收协程
参数 ： 要回收的协程对象
gevent.joinall()
功能 ： 回收协程
参数 ： 列表，里面可有多个协程对象

方程流程
import gevent 
f = gevent.spawn(fun1,1)
b = gevent.spawn(fun2)
#回收协成
gevent.join(f)和gevent.join(b)
或		gevent.joinall([f,b])


函数2
from greenlet import greenlet 
#生成协程对象
gr1 = greenlet(test1)
gr2 = greenlet(test2)
＃启动协程，???没有学回收协程
gr1.switch()


线程
* 线程也是所任务编程的一种方法，可以使用计算机多核资源。是计算机核心分配的最小单位
* 线程又称为轻量级的进程，在创建和删除时消耗的计算机资源小

线程和进程关系
* 一个进程中可以包含多个线程
* 进程中的所有线程共享进程的空间资源 （空间，全局变量，分配的内存等）

t.daemon 属性
默认 为False 主线程执行完毕不会影响分支线程的执行
    如果设置为True 则主线执行完毕其他线程也会终止
t.isDaemon(): 判断 daemon属性是True or False 
设置方法：
t.daemon = True 或 t.setDaemon(True)
		
函数
import threading 
obj=threading.Thread(target = fun,args = ())
t.start()  		#启动线程
t.join(timeout)   #回收线程



#------------
进程池
from multiprocessing import Pool 
pool=Pool(n)	#进程数
方法1： pool.apply_async( func，*args，**kwds) 
功能： 异步方式将事件放入进程池执行
参数： func ： 要执行的事件函数
      args ： 同Process中args 给函数传参
	  kwds ： 同Process中kwargs 给函数传参
返回值 ： 返回一个对象 该对象可以通过get()方法得到func函数的返回值

方法2：pool.apply() 
用法和apply_async一样，只是需要顺序执行，一个事件结束在执行另一个事件

方法3：pool.map(func,iter)
功能 ： 类似于内建函数map 将第二个参数的迭代数传递个第一个参数的函数执行。同时兼容了使用进程池执行
返回值： 返回func的返回值列表
pool.close（） 
功能 ： 关闭进程池，使其无法加入新的事件
pool.join（）
功能 ： 阻塞等待进程池退出 （当所有事件处理完毕后）



线程池：
from multiprocessing.dummy import Pool as pl
pool = pl(n)	#线程数
# url列表收集
all_url = []
pool.map(func, all_url)
pool.close()
pool.join()

#-----线程
1、https://www.cnblogs.com/xiaozi/p/6182990.html
pip install threadpool
pool = ThreadPool(n)  #n=poolsize
requests = makeRequests(func, args_list)  
res=[pool.putRequest(req) for req in requests]  
pool.wait() 

2、https://www.jianshu.com/p/b9b3d66aa0be、  https://www.cnblogs.com/FG123/p/9704233.html
from concurrent.futures import ThreadPoolExecutor
 pool=ThreadPoolExecutor(max_workers=2)
task1 =  pool.submit(func1, (3))
task2 = pool.submit(func2, (2))



