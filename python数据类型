

python数据类型
	数字，字符串，列表，元组，字典，集合


字符串
S.center(width [,fill]) 	将原字符串居中，左右默认填充空格
S.count(sub [,start [,end]]) 	获取一个字符串中子串的个数
S.strip() 	返回去掉左右空白字符的字符串
S.replace(old, new[, count]) 	将原字符串的old用new代替，生成一个新的字符串



列表(切片)
  列表是一种可变的，可以存储任意数据类型的容器
  列表是序列
list()          # 生成一个空的列表 等同于 []
list(iterable)  # 用可迭代对象创建一个列表
列表的 in / not in

del 语句  用于删除列表中的元素
    del 序列[整数表达式]
    del 序列[切片]
列表推导式 list comprehension
  列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式

[表达式 for 变量 in 可迭代对象]    或    [表达式 for 变量 in 可迭代对象 if 真值表达式]
L2 = L        # 赋值(没拷贝)
L2 = L[:] 或 L2 = L.copy() 浅拷贝   复制此列表（只复制一层，不会复制深层对象)
import copy
L3 = copy.deepcopy(L)  # 深拷贝

L.index(v [, begin[, end]])返回对应元素的索引下标, begin为开始索引，end为结束索引,当 value 不存在时
触发ValueError错误

L.insert(index, obj) 
L.count(x)
L.clear() 	清空列表,等同于 L[:] = []
L.remove(x) 	从列表中删除第一次出现在列表中的值
L.pop([index]) 	删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系

L.append(x) 	向列表中追加单个元素
L.extend(lst) 	向列表追加另一个列表

L.sort(reverse=False) 	将列表中的元素进行排序，默认顺序按值的小到大的顺序排列
L.reverse() 	列表的反转，用来改变原列表的先后顺序




元组(有序可迭代，可索引，不可变对象)

 tuple(iterable)
元组是不可改变的序列，同list一样，元组可以存放任意类型的元素
reversed(seq)  返回反向顺序的迭代器对象
sorted(iterable, reverse=False)   返回已排序的列表(默认升序)



字典(不能索引，无序，可迭代键，比较键的大小，)
  字典是一种可变的容器,可以存储任意类型的数据
  字典是一种可变的容器,可以存储任意类型的数据
  字典中的每个数据都是用'键'进行索引的，而不像序列可以用下标(index)来进行索引
  字典中的数据没有先后顺序关系, 字典的存储是无序的
  字典中的数据以键(key)-值(value) 对的形式进行映射存储
  字典的键不能重复，具只能用"不可变类型"作为字典的键

 添加/修改字典元素
    字典[键] = 值对象
 删除字典元素 del 语句
      del 字典[键]
字典的成员资格判断　in / not in 运算符
　 用 in 运算符可以判断一个键是否存在于字典中，如果存在则返回True,否则返回Fals
字典推导式:
    {键表达式 : 值表达式 for 变量 in 可迭代对象 [if 真值表达式]}

D.clear() 	清空字典
del 字典[键]
D.pop(key) 	移除键，同时返回此键所对应的值
D.copy() 	返回字典D的副本,只复制一层(浅拷贝)
D.update(D2) 	将字典 D2 合并到D中，如果键相同，则此键的值取D2的值作为新值



D.get(key, default) 	返回键key所对应的值,如果没有此键，则返回default
D.keys() 	返回可迭代的 dict_keys 集合对象
D.values() 	返回可迭代的 dict_values 值对象
D.items() 	返回可迭代的 dict_items 对象




集合(不能索引，无序，可迭代)
  集合是可变的容器，集合内的数据对象都是唯一的（不能重复多次的)
  集合是无序的存储结构，集合中的数据没有先后顺序关系
  集合内的元素必须是不可变对象
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

	s1&s2 交; s1|s2并; s1-s2 补;s1^s2 对称补;
in /not in 运算
  <字迹; <=; >超集; >= ;== ;!=
集合推导式 
  集合推导式是用可迭代对象生成集合的表达式
    { 表达式 for 变量 in 可迭代对象 [if 真值表达式]}


S.add(e) 	在集合中添加一个新的元素e；如果元素已经存在，则不添加
S.discard(e) 	从集合S中移除一个元素e;
S.remove(e) 	从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误
S.pop() 	从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常
S.update(s2) 	用 S与s2得到的全集更新变量S

S.clear() 	清空集合内的所有元素
S.copy() 	将集合进行一次浅拷贝


  s = set()    # s 为空集合
  s = set(iterable)      #可迭代对象
  s = set(range(1:10:3))  # s = {1,4,7}
  s = set("ABC")  # s = {'A', 'B', 'C'}
  s = set({1:'1', 2:"2", 5:'5'}) # s = {1,2,5}
 

字符串文本解析方法 split 和 join
  S.split(sep=None)  将字符串使用sep作为分隔符分割S字符串，返回分割后的字符串列表，当不给定参数时，用空白字符作为分隔符分割
  S.join(iterable)  用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串

  示例：
    s = 'Beijing is capital'
    L = s.split(' ') # L = ['Beijing', 'is', 'capital']














